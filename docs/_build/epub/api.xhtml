<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>API</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head>
  <body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="api">
<h1>API</h1>
<p>We’ve added an API, using <a class="reference external" href="https://aws.amazon.com/api-gateway/">API Gateway</a><span class="link-target"> [https://aws.amazon.com/api-gateway/]</span> so we can handle web
requests. These endpoints are defined in the serverless.yml file, and
specify the URL path, method, and handler to invoke.</p>
<div class="section" id="get-upload-url">
<h2>GET /upload_url</h2>
<p>Get a presigned key URL that we can use to PUT the file to do an upload.</p>
<p>Ideally we would like a web page that presents an upload form. It
would first GET a presigned URL from the API, then the browser would
directly PUT the file to that URL. This prevents tying up the API
server with potentially long and large upload files.</p>
<p>Until we have a web page and Angular code to handle the form, response
and upload, we’ll use <code class="docutils literal"><span class="pre">curl</span></code>.</p>
<p>First, find the API endpoint based on your stage:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span>\<span class="o">../</span><span class="n">node_modules</span><span class="o">/.</span><span class="n">bin</span><span class="o">/</span><span class="n">sls</span> <span class="n">info</span> <span class="o">--</span><span class="n">stage</span> <span class="n">shentonfreude</span>
</pre></div>
</div>
<p>I then set a variable for the URL to make it easy to refer to:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">urlget</span><span class="o">=</span><span class="s2">&quot;https://WHATEVER.execute-api.us-east-1.amazonaws.com/shentonfreude/upload_url&quot;</span>
</pre></div>
</div>
<p>Get a presigned URL from the API, specifying the name of your file as
a querystring param:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span>curl $urlget?filename=ALEX.JPG

{&quot;url&quot;: &quot;https://uploads-info-shentonfreude.s3.amazonaws.com/ALEX.JPG?AWSAccessKeyId=...&quot;}
</pre></div>
</div>
<p>Set a variable to that long URL for convenience:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">url</span><span class="o">=</span><span class="s2">&quot;https://uploads-info-shentonfreude.s3.amazonaws.com/ALEX.JPG?AWSAccessKeyId=...&quot;</span>
</pre></div>
</div>
<p>Then PUT a file to that URL:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span>curl -i --upload-file ~/Pictures/alex.jpg $url
</pre></div>
</div>
<div class="section" id="serverless-yml">
<h3>serverless.yml</h3>
<p>We define the function and handler together:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">getUploadPSK</span><span class="p">:</span>
<span class="n">handler</span><span class="p">:</span> <span class="n">handler</span><span class="o">.</span><span class="n">get_upload_url</span>
<span class="n">events</span><span class="p">:</span>
  <span class="o">-</span> <span class="n">http</span><span class="p">:</span> <span class="n">GET</span> <span class="o">/</span><span class="n">upload_url</span>
</pre></div>
</div>
<p>The Lambda must be given permissions for the presigned URL to allow the upload:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span>iamRoleStatements:
  - Effect: Allow
    Resource: arn:aws:s3:::uploads-info-${self:provider.stage}/*
    Action:
      - s3:PutObject
      - s3:PutObjectAcl
      - s3:PutObjectTagging
</pre></div>
</div>
</div>
</div>
<div class="section" id="get-assets">
<h2>GET /assets</h2>
<p>Return info about the assets from the DynamoDB table, as JSON or if
‘text/html’ is in the request’s Accept header, as HTML.</p>
<p>It’s naive and just does a table scan, which is expensive and stupid
but will be OK for this toy demo (unless we get a lot of items).</p>
<p>I had to fight with DynamoDB to turn numerics returned by boto3
as <code class="docutils literal"><span class="pre">decimal.Decimal</span></code> types into plain old <code class="docutils literal"><span class="pre">int</span></code> so JSON could
render them.</p>
<div class="section" id="id1">
<h3>serverless.yml</h3>
<p>The endpoint is specified in <code class="docutils literal"><span class="pre">serverless.yml</span></code> and we don’t have any
new permissions to add:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">getAssets</span><span class="p">:</span>                    <span class="c1"># JSON, or HTML if &quot;Accepts: text/html&quot;</span>
  <span class="n">handler</span><span class="p">:</span> <span class="n">handler</span><span class="o">.</span><span class="n">get_assets</span>
  <span class="n">events</span><span class="p">:</span>
    <span class="o">-</span> <span class="n">http</span><span class="p">:</span>  <span class="n">GET</span> <span class="o">/</span><span class="n">assets</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>