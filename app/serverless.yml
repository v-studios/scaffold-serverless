service: app
frameworkVersion: "=1.26.1"

custom:
  stagevars: ${file(stagevars.yml)}

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'local'}       # default to 'local', 'dev' is more dangerous
  region: ${opt:region, self:custom.stagevars.${self:provider.stage}.region} # region should come from stagevars.yml
  environment:
    DYNAMODB_UPLOAD_INFO_TABLE: 
      Ref: uploadsInfoTable
    UPLOAD_BUCKET_NAME: uploads-info-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Resource: 
        "Fn::GetAtt": [uploadsInfoTable, Arn]
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
    - Effect: Allow
      Resource: arn:aws:s3:::uploads-info-${self:provider.stage}/*
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:PutObjectTagging

functions:
  s3upload:
    handler: handler.s3upload
    events:
      - s3:
          bucket: uploads-info-${self:provider.stage}
          event: s3:ObjectCreated:*
  getUploadURL:
    handler: handler.get_upload_url
    events:
      - http: GET /upload_url
  getAssets:                    # JSON, or HTML if "Accepts: text/html"
    handler: handler.get_assets
    events:
      - http:
          path: /assets
          method: get
          # turning on CORS creates in AWS APIG console an OPTIONS resource
          # but our method must return header Access-Control-Allow-Origin.
          cors: true

resources:
  Resources:
    # Don't spec the upload bucket here, the Handler spec will create it
    uploadsInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: uploads-info-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema: 
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# plugins:
#   - serverless-python-requirements
#   - serverless-finch

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
